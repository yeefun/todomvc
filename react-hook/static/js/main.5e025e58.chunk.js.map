{"version":3,"sources":["components/Header.js","utils/index.js","components/ListItem.js","components/Main.js","components/FilterableItem.js","components/Footer.js","App.js","index.js"],"names":["Header","addTodo","className","type","placeholder","autoFocus","onKeyUp","useStateWithCallback","initialState","callback","deps","useState","state","seState","useEffect","isEnter","evt","key","keyCode","ListItem","todo","todoIdx","setTodoTitle","setTodoCompleted","removeTodo","inputEditedRef","useRef","undefined","current","focus","editing","setEditing","todoTitle","title","todoCompleted","completed","todoStatus","checked","onChange","currentTarget","onDoubleClick","onClick","defaultValue","ref","editDone","onBlur","newTitle","value","Main","todos","setAllTodosCompleted","pathname","useLocation","ListItems","isCompletedPathname","filter","filterTodos","map","String","id","checkboxCompletedAllRef","htmlFor","completedAll","FilterableItem","to","name","exact","activeClassName","Footer","totalNotCompletedTodos","removeCompletedTodos","FilterableItems","item","hasCompletedTodo","some","savedTodos","JSON","parse","window","localStorage","getItem","App","setItem","stringify","setTodos","totalTodos","length","hasTodo","notCompletedTodos","cloneTodos","TodoBody","idx","newTodos","splice","forEach","input","newTodo","theLastTodoId","push","clearValue","theLastTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e025e58.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Header({addTodo}) {\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n      <input\n        className=\"new-todo\"\n        type=\"text\"\n        placeholder=\"What needs to be done?\"\n        autoFocus\n        onKeyUp={addTodo}\n      />\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import {useState, useEffect} from 'react';\n\nexport {isEnter, useStateWithCallback};\n\nfunction useStateWithCallback(initialState, callback, deps = []) {\n  const [state, seState] = useState(initialState);\n\n  useEffect(() => {\n    callback(state);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state, ...deps]);\n\n  return [state, seState];\n}\n\nfunction isEnter(evt) {\n  return evt.key === 'Enter' || evt.keyCode === 13;\n}\n","import React, {useRef} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {useStateWithCallback, isEnter} from '../utils/index';\n\nfunction ListItem({todo, todoIdx, setTodoTitle, setTodoCompleted, removeTodo}) {\n  const inputEditedRef = useRef(undefined);\n\n  const [editing, setEditing] = useStateWithCallback(\n    false,\n    function focusEditedInput() {\n      inputEditedRef.current.focus();\n    }\n  );\n\n  const todoTitle = todo.title;\n  const todoCompleted = todo.completed;\n\n  return (\n    <li className={todoStatus()}>\n      <div className=\"view\">\n        <input\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={todoCompleted}\n          onChange={toggleCompleted}\n        />\n        <label onDoubleClick={editTodo}>{todoTitle}</label>\n        <button className=\"destroy\" onClick={() => removeTodo(todoIdx)} />\n      </div>\n      <input\n        className=\"edit\"\n        type=\"text\"\n        defaultValue={todoTitle}\n        ref={inputEditedRef}\n        onKeyUp={editDone}\n        onBlur={editDone}\n      />\n    </li>\n  );\n\n  function todoStatus() {\n    if (editing) {\n      return 'editing';\n    }\n\n    if (todoCompleted) {\n      return 'completed';\n    }\n\n    return '';\n  }\n\n  function editTodo() {\n    setEditing(true);\n  }\n\n  function editDone(evt) {\n    if (isEnter(evt) || evt.type === 'blur') {\n      const newTitle = evt.currentTarget.value;\n\n      if (newTitle !== todoTitle) {\n        setTodoTitle(newTitle, todoIdx);\n      }\n\n      setEditing(false);\n    }\n  }\n\n  function toggleCompleted(evt) {\n    const completed = evt.currentTarget.checked;\n    setTodoCompleted(completed, todoIdx);\n  }\n}\n\nListItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  todoIdx: PropTypes.number.isRequired,\n  setTodoTitle: PropTypes.func.isRequired,\n  setTodoCompleted: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n\nexport default ListItem;\n","import React, {useRef} from 'react';\nimport {useLocation} from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport ListItem from './ListItem';\n\nfunction Main({\n  todos,\n  setTodoCompleted,\n  setTodoTitle,\n  removeTodo,\n  setAllTodosCompleted,\n}) {\n  const {pathname} = useLocation();\n\n  function filterTodos() {\n    if (pathname === '/') {\n      return todos;\n    }\n\n    const isCompletedPathname = pathname === '/completed';\n    return todos.filter(todo => todo.completed === isCompletedPathname);\n  }\n\n  const filteredTodos = filterTodos();\n  const ListItems = filteredTodos.map((todo, todoIdx) => (\n    <ListItem\n      todo={todo}\n      todoIdx={todoIdx}\n      key={String(todo.id)}\n      setTodoTitle={setTodoTitle}\n      setTodoCompleted={setTodoCompleted}\n      removeTodo={removeTodo}\n    />\n  ));\n\n  const checkboxCompletedAllRef = useRef(undefined);\n\n  return (\n    <div className=\"main\">\n      <input\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        type=\"checkbox\"\n        ref={checkboxCompletedAllRef}\n      />\n      <label htmlFor=\"toggle-all\" onClick={toggleCompletedAll}>\n        Mark all as complete\n      </label>\n      <ul className=\"todo-list\">{ListItems}</ul>\n    </div>\n  );\n\n  function toggleCompletedAll() {\n    const completedAll = checkboxCompletedAllRef.current.checked;\n    setAllTodosCompleted(!completedAll);\n  }\n\n  // do not use function to avoid re-render\n  // function ListItems() {\n  //   return todos.map((todo, todoIdx) => (\n  //     <ListItem\n  //       todo={todo}\n  //       todoIdx={todoIdx}\n  //       key={String(todo.id)}\n  //       setTodoTitle={setTodoTitle}\n  //       setTodoCompleted={setTodoCompleted}\n  //       removeTodo={removeTodo}\n  //     />\n  //   ));\n  // }\n}\n\nMain.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setTodoCompleted: PropTypes.func.isRequired,\n  setTodoTitle: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  setAllTodosCompleted: PropTypes.func.isRequired,\n};\n\nexport default Main;\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nfunction FilterableItem({to, name}) {\n  return (\n    <li>\n      <NavLink to={to} exact activeClassName=\"selected\">\n        {name}\n      </NavLink>\n    </li>\n  );\n}\n\nFilterableItem.propTypes = {\n  to: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nexport default FilterableItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport FilterableItem from './FilterableItem';\n\nfunction Footer({todos, totalNotCompletedTodos, removeCompletedTodos}) {\n  const filteredItems = [\n    {to: '/', name: 'All'},\n    {to: '/active', name: 'Active'},\n    {to: '/completed', name: 'Completed'},\n  ];\n\n  const FilterableItems = filteredItems.map(item => (\n    <FilterableItem to={item.to} name={item.name} key={item.name} />\n  ));\n\n  const hasCompletedTodo = todos.some(todo => todo.completed);\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{totalNotCompletedTodos}</strong> item left\n      </span>\n      <ul className=\"filters\">{FilterableItems}</ul>\n      {hasCompletedTodo ? (\n        <button className=\"clear-completed\" onClick={removeCompletedTodos}>\n          Clear completed\n        </button>\n      ) : null}\n    </footer>\n  );\n}\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  totalNotCompletedTodos: PropTypes.number.isRequired,\n  removeCompletedTodos: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\n\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\n\nimport './App.css';\n\nimport {useStateWithCallback, isEnter} from './utils/index';\n\nconst savedTodos =\n  JSON.parse(window.localStorage.getItem('todoMVCReactHook')) || [];\n\nfunction App() {\n  const [todos, setTodos] = useStateWithCallback(\n    savedTodos,\n    function saveTodos() {\n      window.localStorage.setItem('todoMVCReactHook', JSON.stringify(todos));\n    }\n  );\n\n  const totalTodos = todos.length;\n  const hasTodo = totalTodos > 0;\n\n  const notCompletedTodos = cloneTodos().filter(todo => !todo.completed);\n  function removeCompletedTodos() {\n    setTodos(notCompletedTodos);\n  }\n  const totalNotCompletedTodos = notCompletedTodos.length;\n\n  const TodoBody = hasTodo ? (\n    <>\n      <Main\n        todos={todos}\n        setTodoCompleted={setTodoCompleted}\n        setTodoTitle={setTodoTitle}\n        removeTodo={removeTodo}\n        setAllTodosCompleted={setAllTodosCompleted}\n      />\n      <Footer\n        todos={todos}\n        totalNotCompletedTodos={totalNotCompletedTodos}\n        removeCompletedTodos={removeCompletedTodos}\n      />\n    </>\n  ) : null;\n\n  return (\n    <>\n      <Header addTodo={addTodo} />\n      {TodoBody}\n    </>\n  );\n\n  function cloneTodos() {\n    return [...todos].map(todo => ({...todo}));\n  }\n\n  function addTodo(evt) {\n    if (isEnter(evt)) {\n      const input = evt.currentTarget;\n      const newTodo = {\n        id: (theLastTodoId() || 0) + 1,\n        title: input.value,\n        completed: false,\n      };\n\n      const newTodos = cloneTodos();\n      newTodos.push(newTodo);\n      setTodos(newTodos);\n      // setTodos([...todos, newTodo]);\n\n      clearValue(input);\n    }\n  }\n  function removeTodo(idx) {\n    const newTodos = cloneTodos();\n    newTodos.splice(idx, 1);\n    setTodos(newTodos);\n    // setTodos([...todos.slice(0, idx), ...todos.slice(idx + 1)]);\n  }\n\n  function setTodoCompleted(completed, idx) {\n    const newTodos = cloneTodos();\n    newTodos[idx].completed = completed;\n\n    setTodos(newTodos);\n  }\n\n  function setTodoTitle(title, idx) {\n    const newTodos = cloneTodos();\n    newTodos[idx].title = title;\n\n    setTodos(newTodos);\n  }\n\n  function setAllTodosCompleted(completedAll) {\n    const newTodos = cloneTodos();\n    newTodos.forEach(todo => {\n      // eslint-disable-next-line no-param-reassign\n      todo.completed = completedAll;\n    });\n\n    setTodos(newTodos);\n  }\n\n  function theLastTodoId() {\n    const newTodos = cloneTodos();\n    const theLastTodo = newTodos[totalTodos - 1];\n    return theLastTodo?.id;\n    // const [theLastTodo = {}] = todos.slice(-1);\n    // return theLastTodo.id;\n  }\n}\n\nfunction clearValue(input) {\n  // eslint-disable-next-line no-param-reassign\n  input.value = '';\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from 'react-router-dom';\nimport App from './App';\nimport 'todomvc-app-css/index.css';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}